module Simulator.Data.ByteArray;

import Stdlib.Prelude open;
import Stdlib.Trait.Eq open;
import Anoma.Data.ByteArray as ByteArray open using {ByteArray} public;

pow2 : Nat -> Nat
  | zero := 1
  | (suc n) := foldl {_} {Nat} {{_}} \ {acc _ := 2 * acc} 1 (0 to n);

syntax operator <> cons;

<> (ba1 ba2 : ByteArray) : ByteArray :=
  let
    ba1Size := ByteArray.length ba1;
    ba2Size := ByteArray.length ba2;
    ba1Content := ByteArray.toAnomaContents ba1;
    ba2Content := ByteArray.toAnomaContents ba2;
    byteSize := 8;
  in ByteArray.fromAnomaContents
    (ba1Size + ba2Size)
    (ba2Content * pow2 (byteSize * ba1Size) + ba1Content);

module ByteArray;

  open ByteArray public;

end;
